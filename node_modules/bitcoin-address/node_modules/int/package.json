{
  "author": {
    "name": "Roman Shtylman",
    "email": "shtylman@gmail.com"
  },
  "name": "int",
  "description": "arbitrary precision integer and library in pure javascript",
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/shtylman/node-int.git"
  },
  "keywords": [
    "int",
    "integer",
    "arbitrary"
  ],
  "main": "int.js",
  "devDependencies": {
    "mocha": "~1.8.0"
  },
  "license": "MIT",
  "scripts": {
    "test": "mocha"
  },
  "testling": {
    "browsers": [
      "ie8",
      "ie9",
      "firefox/15",
      "chrome/22",
      "safari/5.1"
    ],
    "harness": "mocha-tdd",
    "files": "test/*.js"
  },
  "contributors": [
    {
      "name": "Jonas Raoni"
    },
    {
      "name": "Soares Silva"
    },
    {
      "name": "Roman Shtylman",
      "email": "shtylman@gmail.com"
    }
  ],
  "readme": "[![Build Status](https://secure.travis-ci.org/shtylman/node-int.png)](http://travis-ci.org/shtylman/node-int)\n\n### Don't let javascript numbers hold you back. Let your true large numbers shine!! ###\n\n**int** is an arbitrary size integer library written in pure javascript. Why? Because I can and because you need it.\n\n## quick and dirty ##\n\n```\nnpm install int\n```\n\n```javascript\nvar int = require('int');\n\nvar large = int('1234567890').mul('1234567890');\n\n// did it work?\nconsole.log(large.toString());\n//'1524157875019052100' hell yea\n\n// other cool stuff\nvar add_me = int('123456').add('-123456');\nvar power_up = int(2).pow(10);\n\n```\n\n## api ##\n\nBesides the **int** function, all of the other methods operate on the objects returned by **int**\n\n### int (value) ###\n> construct a new aribtrary precision integer\n\n> valid values are native numbers, strings, or int objects. Anything after a decimal point will be discarded\n\n### add (value) ###\n> add {value} to our number and return a new int\n\n### sub (value) ###\n> subtract {value} from our number and return a new int\n\n### mul (value) ###\n> multiply our int by {value} and return a new int\n\n### div (value) ###\n> divide our int by {value} and return a new int (can truncate)\n\n### pow (value) ###\n> raise our int by {value} and return a new int\n\n### mod (value) ###\n> mod our int by {value} and return the new int\n\n### neg ###\n> return a new int that is the negative\n\n### abs ###\n> return a new int that is the absolute value\n\n### cmp (value) ###\n> compare our value to {value}\n\n> return 0 if self and value are equal, -1 if self < value, 1 if self > value\n\n### lt (value) ###\n> return true if self < value\n\n### lte (value) ###\n> return true if self <= value\n\n### gt (value) ###\n> return true if self > value\n\n### gte (value) ###\n> return true if self >= value\n\n### eq (value) ###\n> return true if self == value\n\n### ne (value) ###\n> return true if self != value\n\n## browser support\n\n[![browser support](http://ci.testling.com/shtylman/node-int.png)](http://ci.testling.com/shtylman/node-int)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/shtylman/node-int/issues"
  },
  "homepage": "https://github.com/shtylman/node-int",
  "_id": "int@0.1.1",
  "_from": "int@0.1.1"
}
